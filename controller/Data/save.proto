syntax = "proto3";

package Hpmv.Save;

message Vector2 {
    float x = 1;
    float y = 2;
}

message Vector3 {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Quaternion {
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4;
}

message CatchAction {
    Vector2 facing_position = 1;
}

message EntityPath {
    repeated int32 path = 1;
}

message EntityReference {
    oneof kind {
        EntityPath literal = 1;
        int32 spawner = 2;
    }
}

message GridPos {
    int32 x = 1;
    int32 y = 2;
}

message LocationToken {
    oneof kind {
        EntityReference entity = 1;
        Vector2 literal = 2;
        GridPos grid = 3;
    }
}

message GotoAction {
    LocationToken location = 1;
    float allowed_error = 2;
    bool allow_dash = 3;
}

message InteractAction {
    EntityReference subject = 1;
    bool primary = 2;
    bool prepare = 3;
    bool is_pickup = 4;
    bool expect_spawn = 5;
}

message PickupClosestAction {
    string prefab_name = 1;
}

message ThrowAction {
    LocationToken location = 1;
    Vector2 bias = 2;
    double angle_allowance = 3;
}

message DropAction {
    LocationToken location = 1;
    double angle_allowance = 2;
}

message PilotRotationAction {
    EntityReference pilot_rotation_entity = 1;
    float target_angle = 2;
    float angle_allowance = 3;
}

message WaitAction {
    int32 num_frames = 1;
}

message WaitForCleanPlateAction {
    EntityPath drying_part = 1;
}

message WaitForDirtyPlateAction {
    EntityPath dirty_plate_spawner = 1;
    int32 count = 2;
}

message WaitForWashingProgressAction {
    EntityReference entity = 1;
    double washing_progress = 2;
}

message WaitForChoppingProgressAction {
    EntityReference entity = 1;
    double chopping_progress = 2;
}

message WaitForCookingProgressAction {
    EntityReference entity = 1;
    double cooking_progress = 2;
}

message WaitForMixingProgressAction {
    EntityReference entity = 1;
    double mixing_progress = 2;
}

message WaitForSpawnAction {
    EntityReference spawner = 1;
}

message GameActionPredictions {
    int32 start_frame = 2;
    int32 end_frame = 3;
}

message GameAction {
    oneof action {
        CatchAction catch = 100;
        GotoAction goto = 101;
        InteractAction interact = 102;
        PickupClosestAction pickup_closest = 115;
        ThrowAction throw = 103;
        DropAction drop = 109;
        WaitAction wait = 104;
        PilotRotationAction pilot_rotation = 114;
        WaitForCleanPlateAction wait_for_clean_plate = 105;
        WaitForDirtyPlateAction wait_for_dirty_plate = 106;
        WaitForWashingProgressAction wait_for_washing_progress = 110;
        WaitForChoppingProgressAction wait_for_chopping_progress = 111;
        WaitForCookingProgressAction wait_for_cooking_progress = 112;
        WaitForMixingProgressAction wait_for_mixing_progress = 113;
        WaitForSpawnAction wait_for_spawn = 108;
    }
}

message GameActionNode {
    int32 chef_index = 1;
    int32 action_id = 2;
    repeated int32 deps = 3;
    GameActionPredictions predictions = 4;
    GameAction action = 5;
}

message VersionedInt {
    repeated int32 frame = 1;
    repeated int32 data = 2;
    int32 initial_value = 3;
}

message VersionedISpawnClaimingAction {
    repeated int32 frame = 1;
    repeated int32 data = 2;
    int32 initial_value = 3;
}


message VersionedVector3 {
    repeated int32 frame = 1;
    repeated Vector3 data = 2;
    Vector3 initial_value = 3;
}

message VersionedQuaternion {
    repeated int32 frame = 1;
    repeated Quaternion data = 2;
    Quaternion initial_value = 3;
}

message VersionedBool {
    repeated int32 frame = 1;
    repeated bool data = 2;
    bool initial_value = 3;
}

message VersionedDouble {
    repeated int32 frame = 1;
    repeated double data = 2;
    double initial_value = 3;
}

message SavedCollider {
    EntityPath entity = 1;
    int32 collider_index = 2;
}

message SpecificEntityData_ThrowableItem {
    bool is_flying = 1;
    double flight_timer = 2;
    EntityPath thrower = 3;
    repeated SavedCollider ignored_colliders = 4;
}

message FutureOrder {
    repeated int32 ingredients = 1;
    int32 order_index = 2;
}

message SpecificEntityData_KitchenFlowController {
    repeated bytes active_orders = 1;
    int32 next_order_id = 2;
    int32 last_combo_index = 3;
    double time_since_last_order = 4;
    bytes team_score = 5;
    repeated FutureOrder future_orders = 6;
}

message SpecificEntityData_PlateRespawn {
    int32 plate_return_station = 1;
    double timer = 2;
}

message SpecificEntityData {
    EntityPath attachment_parent = 1;
    EntityPath attachment = 2;
    repeated int32 contents = 3;
    map<int32, double> chop_interacters = 4;
    EntityPath item_being_chopped = 5;
    repeated EntityPath interacters = 6;
    EntityPath interacting_with = 18;
    int32 num_plates = 8;
    repeated SpecificEntityData_PlateRespawn plate_respawns = 16;
    SpecificEntityData_ThrowableItem throwable_item = 12;
    bool is_unwarpable = 10;
    bytes raw_game_entity_data = 11;
    EntityPath session_interacter = 13;
    float pilot_rotation_angle = 14;
    int32 switching_index = 15;
    repeated EntityPath stack_contents = 17;
    SpecificEntityData_KitchenFlowController kitchen_flow_controller = 19;
    bool is_cooking_station_turned_on = 20;
    bool is_cooking_station_cooking = 21;
}

message ChefState {
    EntityPath highlighted_for_pickup = 2;
    EntityPath highlighted_for_use = 3;
    EntityPath highlighted_for_placement = 4;
    EntityPath interacting_entity = 7;
    double dash_timer = 5;
    Vector3 last_velocity = 8;
    bool aiming_throw = 9;
    bool movement_input_suppressed = 10;
    Vector3 last_move_input_direction = 11;
    double impact_start_time = 12;
    double impact_timer = 13;
    Vector3 impact_velocity = 14;
    double left_over_time = 15;
}

message VersionedSpecificEntityData {
    repeated int32 frame = 1;
    repeated SpecificEntityData data = 2;
    SpecificEntityData initial_value = 3;
}

message VersionedChefState {
    repeated int32 frame = 1;
    repeated ChefState data = 2;
    ChefState initial_value = 3;
}

message ButtonOutput {
    bool is_down = 1;
    bool just_pressed = 2;
    bool just_released = 3;
}

message ActualControllerInput {
    Vector2 axes = 1;
    ButtonOutput primary = 2;
    ButtonOutput secondary = 3;
    ButtonOutput dash = 4;
}

message VersionedActualControllerInput {
    repeated int32 frame = 1;
    repeated ActualControllerInput data = 2;
    ActualControllerInput initial_value = 3;
}

message ControllerState {
    Vector2 axes = 1;
    double button_cooldown = 2;
    double pickup_cooldown = 3;
    bool primary_button_down = 4;
    bool secondary_button_down = 5;
    double button_down_duration_left = 6;
    Vector2 axes_velocity = 7;
    Vector2 axes_acceleration = 8;
    bool axes_down = 9;
    double axes_cooldown = 10;
}

message VersionedControllerState {
    repeated int32 frame = 1;
    repeated ControllerState data = 2;
    ControllerState initial_value = 3;
}

message SpawningPath {
    int32 initial_fixed_entity_id = 1;
    repeated int32 spawnable_ids = 2;
}

message PrefabRecord {
    string name = 1;
    string class_name = 2;
    repeated int32 spawns_indices = 3;
    SpawningPath spawning_path = 21;
    bool can_use = 4;
    bool is_crate = 5;
    double max_progress = 6;
    bool can_contain_ingredients = 7;
    bool is_ingredient = 9;
    int32 ingredient_id = 10;
    bool is_board = 12;
    bool is_washing_station = 13;
    bool is_choppable = 16;
    bool is_button = 19;
    bool is_attach_station = 20;
    bool can_be_attached = 22;
    bool is_chef = 23;
    bool is_cannon = 24;
    bool is_throwable = 25;
    bool is_terminal = 26;
    bool is_mixer = 27;
    bool is_cooking_handler = 28;
    bool is_cooking_station = 33;
    bool is_pickup_item_switcher = 29;
    bool has_trigger_color_cycle = 30;
    bool is_kitchen_flow_controller = 31;
    bool is_stack = 32;
    bool ignore = 17;
    repeated Vector2 occupied_grid_points = 18;
}

message GameEntityRecord {
    EntityPath path = 1;
    string display_name = 2;
    string class_name = 3;
    int32 prefab_index = 21;
    EntityPath spawner = 13;
    repeated EntityPath spawned = 14;
    VersionedInt next_spawn_id = 5;
    VersionedInt spawn_owner = 6;
    VersionedVector3 position = 7;
    VersionedVector3 velocity = 8;
    VersionedVector3 angular_velocity = 16;
    VersionedQuaternion rotation = 15;
    VersionedBool existed = 9;
    VersionedSpecificEntityData data = 10;
    VersionedChefState chef_state = 11;
    VersionedDouble washing_progress = 17;
    VersionedDouble chopping_progress = 18;
    VersionedDouble cooking_progress = 19;
    VersionedDouble mixing_progress = 20;
}


message GameEntityRecords {
    repeated PrefabRecord prefabs = 4;
    repeated GameEntityRecord all_records = 1;
    map<int32, VersionedControllerState> controllers = 2;
    VersionedInt critical_section_for_warping = 3;
}

message GameActionChefList {
    EntityPath chef = 1;
    repeated GameActionNode actions = 2;
}

message GameActionSequences {
    repeated GameActionChefList chefs = 1;
}

message Polygon {
    repeated Vector2 points = 1;
}

message Point64 {
    int64 x = 1;
    int64 y = 2;
}

message IntList {
    repeated int32 values = 1;
}

message GameMapGeometry {
    Vector2 top_left = 1;
    Vector2 size = 2;
}

message GameMap {
    repeated Polygon polygons = 1;
    Vector2 top_left = 2;
    repeated bool precomputed_connectivity = 3;
    repeated int32 precomputed_connectivity_dimensions = 4;
    repeated Point64 boundary_points = 5;
    repeated IntList points_mesh = 6;
}

message InputHistory {
    map<int32, VersionedActualControllerInput> frame_inputs = 1;
}

message GameSetup {
    GameMap map = 1;
    map<int32, GameMap> map_by_chef = 7;
    GameMapGeometry geometry = 8;
    GameEntityRecords records = 2;
    GameActionSequences sequences = 3;
    InputHistory input_history = 4;
    int32 last_empirical_frame = 5;
    int32 last_simulated_frame = 6;
}

message AnalysisRange {
    int32 id = 1;
    int32 start_frame = 2;
    int32 end_frame = 3;
    int32 kind = 4;
    repeated int32 dependencies = 5;
    bool has_value = 8;
    double start_value = 6;
    double end_value = 7;
}

message AnalysisBlock {
    int32 start_frame = 1;
    int32 end_frame = 2;
    repeated int32 ranges = 3;
    repeated int32 recipe_annotation = 4;
}

message AnalysisRow {
    repeated AnalysisBlock blocks = 1;
    repeated AnalysisRange ranges = 2;
    string name = 3;
    int32 kind = 4;
}

message Analysis {
    repeated AnalysisRow rows = 1;
}
