<div class="action-editor">
    <div class="action-editor-title">[@(Node.Id)] @(Node.Action.Describe())</div>
    <div class="action-editor-predictions">
        Start: @(Node.Predictions.StartFrame ?? -1); End: @(Node.Predictions.EndFrame ?? -1)
    </div>
    @if (Node.Action is WaitAction wait) {
        <div class="action-editor-property">
            Change to <input @bind="NumFramesEditing"/>
            <button @onclick="() => {wait.NumFrames = NumFramesEditing; DependenciesChanged.InvokeAsync(false); }" disabled="@(!CanEdit)">Change</button>
        </div>
    }
    <div class="action-editor-deps">
        <div class="action-editor-deps-title">Dependencies:</div>
        @foreach (var dep in Node.Deps) {
            var depNode = Sequences.NodeById[dep];
            <div class="action-editor-dep">
                <div class="action-editor-dep-@(depNode.Action.Chef.className)"></div>
                <div class="action-editor-dep-title">@(depNode.Action.Describe())</div>
                <button class="action-editor-dep-delete" @onclick="() => HandleDelete(dep)" disabled="@(!CanEdit)">Delete</button>
            </div>
        }
        <button class="action-editor-deps-add" @onclick="AddDependency" disabled="@(!CanEdit)">Add Dependency</button>
    </div>
</div>
