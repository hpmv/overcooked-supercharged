<div class="action-editor">
    <div class="action-editor-row">
        <div class="action-editor-title">[@(Node.Id)] @(Node.Action.Describe())</div>
        <div class="action-editor-predictions">
            (Frames @(Node.Predictions.StartFrame == null ? "??" : ("" + Node.Predictions.StartFrame))
            to @(Node.Predictions.EndFrame == null ? "??" : ("" + Node.Predictions.EndFrame)))
        </div>
    </div>
    @if (Node.Action is GotoAction gotoAction) {
        <div class="action-editor-row">
            @(gotoAction.DisallowDash ? "Disallowing Dash" : "Allowing Dash") <button @onclick="() => {gotoAction.DisallowDash = !gotoAction.DisallowDash; DependenciesChanged.InvokeAsync(false); }" disabled="@(!CanEdit)">Toggle</button>
            @(gotoAction.DisallowOvershoot ? "Disallowing Overshoot" : "Allowing Overshoot") <button @onclick="() => {gotoAction.DisallowOvershoot = !gotoAction.DisallowOvershoot; DependenciesChanged.InvokeAsync(false); }" disabled="@(!CanEdit)">Toggle</button>
        </div>
    }
    @if (Node.Action is InteractAction interact) {
        <div class="action-editor-row">
            @(interact.DisallowDash ? "Disallowing Dash" : "Allowing Dash") <button @onclick="() => {interact.DisallowDash = !interact.DisallowDash; DependenciesChanged.InvokeAsync(false); }" disabled="@(!CanEdit)">Toggle</button>
            @(interact.DisallowOvershoot ? "Disallowing Overshoot" : "Allowing Overshoot") <button @onclick="() => {interact.DisallowOvershoot = !interact.DisallowOvershoot; DependenciesChanged.InvokeAsync(false); }" disabled="@(!CanEdit)">Toggle</button>
        </div>
    }
    @if (Node.Action is WaitAction wait) {
        <div class="action-editor-row">
            Change to <input @bind="NumFramesEditing" @bind:event="oninput"/>
            <button
                @onclick="() => {wait.NumFrames = NumFramesEditing; DependenciesChanged.InvokeAsync(false); }"
                disabled="@(!CanEdit || !NumFramesEdited)">Change</button>
        </div>
    }
    @if (Node.Action is PilotRotationAction pra) {
        <div class="action-editor-row">
            Target angle: <input @bind="TargetAngleEditing" @bind:event="oninput"/>
            <button
                @onclick="() => {pra.TargetAngle = TargetAngleEditing; DependenciesChanged.InvokeAsync(false); }"
                disabled="@(!CanEdit || !TargetAngleEdited)">Change</button>
        </div>
    }
    @if (Node.Action is WaitForWashingProgressAction wpa) {
        <div class="action-editor-row">
            Target progress: <input @bind="TargetProgressEditing" @bind:event="oninput"/>
            <button
                @onclick="() => {wpa.WashingProgress = float.Parse(TargetProgressEditing); DependenciesChanged.InvokeAsync(false); }"
                disabled="@(!CanEdit || !TargetProgressEdited)">Change</button>
        </div>
    }
    @if (Node.Action is WaitForChoppingProgressAction cpa) {
        <div class="action-editor-row">
            Target progress: <input @bind="TargetProgressEditing" @bind:event="oninput"/>
            <button
                @onclick="() => {cpa.ChoppingProgress = float.Parse(TargetProgressEditing); DependenciesChanged.InvokeAsync(false); }"
                disabled="@(!CanEdit || !TargetProgressEdited)">Change</button>
        </div>
    }
    @if (Node.Action is WaitForCookingProgressAction cpa2) {
        <div class="action-editor-row">
            Target progress: <input @bind="TargetProgressEditing" @bind:event="oninput"/>
            <button
                @onclick="() => {cpa2.CookingProgress = float.Parse(TargetProgressEditing); DependenciesChanged.InvokeAsync(false); }"
                disabled="@(!CanEdit || !TargetProgressEdited)">Change</button>
        </div>
    }
    @if (Node.Action is WaitForMixingProgressAction mpa) {
        <div class="action-editor-row">
            Target progress: <input @bind="TargetProgressEditing" @bind:event="oninput"/>
            <button
                @onclick="() => {mpa.MixingProgress = float.Parse(TargetProgressEditing); DependenciesChanged.InvokeAsync(false); }"
                disabled="@(!CanEdit || !TargetProgressEdited)">Change</button>
        </div>
    }

    <div class="action-editor-deps">
        <div class="action-editor-deps-title">Depends on:</div>
        @foreach (var dep in Node.Deps) {
            var depNode = Sequences.NodeById[dep];
            <div class="action-editor-dep">
                <div class="action-editor-dep-@(depNode.Action.Chef.className)"></div>
                <div class="action-editor-dep-title">@(depNode.Action.Describe())</div>
                <MatIconButton Icon="close" class="action-editor-dep-delete" OnClick="() => HandleDelete(dep)" Disabled="@(!CanEdit)" />
            </div>
        }
        @if (Selector.IsSelecting) {
            <button class="action-editor-deps-add" @onclick="() => Selector.Cancel()">Cancel</button>
        } else {
            <button class="action-editor-deps-add" @onclick="AddDependency" disabled="@(!CanEdit)">Add Dependency</button>
        }
    </div>
</div>
