@page "/studio"
@inject IJSRuntime JSRuntime

<div class="main-container">
    <div class="toolbar">
        <MatIconButton
            Icon="folder_open"
            OnClick="(e) => {RefreshAvailableSaveFiles(); LoadMenu.OpenAsync(LoadButton.Ref);}"
            Disabled=@(realGameConnector != null)
            @ref="LoadButton"/>
        <MatMenu @ref="LoadMenu">
            <MatList>
                @foreach (var file in availableSaveFiles) {
                    <MatListItem OnClick="(e) => LoadLevel(file)">@(file)</MatListItem>
                }
            </MatList>
        </MatMenu>
        <MatIconButton Icon="save" Disabled=@(!level.IsValid()) OnClick="(e) => SaveDialogIsOpen = true"/>
        <MatDialog IsOpen="SaveDialogIsOpen">
            <MatDialogTitle>Save</MatDialogTitle>
            <MatDialogContent>
                <MatInputTextComponent @bind-Value="SaveFileName" Label="Save File Name"></MatInputTextComponent>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="(e) => SaveDialogIsOpen = false">Cancel</MatButton>
                <MatButton OnClick="async (e) => {await SaveLevel(); SaveDialogIsOpen = false;}">Save</MatButton>
            </MatDialogActions>
        </MatDialog>
        <MatIconButton
            Icon="note_add"
            OnClick="(e) => InitializeMenu.OpenAsync(InitializeButton.Ref)"
            Disabled=@(realGameConnector != null)
            @ref="InitializeButton"/>
        <MatMenu @ref="InitializeMenu">
            <MatList>
                @foreach (var (init, type) in levelInitializers) {
                    <MatListItem OnClick="(e) => InitializeNewLevel(init)">@init</MatListItem>
                }
            </MatList>
        </MatMenu>
        <MatIconButton
            Icon="build"
            Disabled=@(!level.IsValid() || realGameConnector != null)
            OnClick="(e) => PatchPrefabMenu.OpenAsync(PatchPrefabButton.Ref)"
            @ref="PatchPrefabButton"/>
        <MatMenu @ref="PatchPrefabMenu">
            <MatList>
                @foreach (var (init, type) in levelInitializers) {
                    <MatListItem OnClick="(e) => PatchPrefab(init)">@init</MatListItem>
                }
            </MatList>
        </MatMenu>
        <div class="toolbar-divider"></div>
        <MatIconButton
            Icon="sports_esports"
            OnClick="(e) => ShowInputDebug = !ShowInputDebug"
            class="@(ShowInputDebug ? "debug-button-on" : "")" />
        <MatIconButton
            Icon="pest_control"
            OnClick="(e) => ShowRecordDebug = !ShowRecordDebug"
            class="@(ShowRecordDebug ? "debug-button-on" : "")" />
        <div class="toolbar-divider"></div>
        @if (realGameConnector == null) {
            <MatIconButton Icon="link" Disabled=@(!level.IsValid()) OnClick="(e) => StartRealSimulation()" />
        } else {
            <MatIconButton Icon="link_off" OnClick="(e) => StopRealSimulation()" />
            <MatIcon
                Icon="@(RealGameStateToIcon(realGameConnector.State))"
                style="@("color: " + RealGameStateToColor(realGameConnector.State))"
                class="toolbar-status-icon" />
        }
        @if (IsSimulationRunning()) {
            <MatIconButton Icon="pause" OnClick="async (e) => await PauseRealSimulation()" />
        } else {
            <MatIconButton Icon="play_arrow" Disabled=@(!IsSimulationPaused()) OnClick="async (e) => await ResumeRealSimulation()" />
        }
        <div class="toolbar-divider"></div>
        <div class="toolbar-text toolbar-text-frame">@(EditorState.SelectedFrame)</div>
        <MatIconButton
            Icon="arrow_back_ios"
            OnClick="async () => await NavigateToFrame(Math.Max(0, EditorState.SelectedFrame - 1))"
            Disabled="EditorState.SelectedFrame <= 0"/>
        <MatIconButton
            Icon="arrow_forward_ios"
            OnClick="async () => await NavigateToFrame(Math.Min(EditorState.SelectedFrame + 1, level.LastEmpiricalFrame))"
            Disabled="EditorState.SelectedFrame >= level.LastEmpiricalFrame"/>
        @if (realGameConnector != null) {
            <div class="toolbar-divider"></div>
            <FramerateControllerEditor FramerateController="realGameConnector.FramerateController"/>
        }
    </div>
    <div class="main-content">
        <div class="left-side-content">
            <EntityRecordVisualizer
                Level="level"
                EditorState="EditorState"
                OnActionAdded="SimulateInResponseToEditorChange"
                CanEdit="CanEdit">
            </EntityRecordVisualizer>

            @if (ShowInputDebug) {
                var frame = EditorState.SelectedFrame;
                <div class="debug-panel">
                    @foreach (var (oneChef, _) in level.entityRecords.Chefs) {
                        var state = oneChef.chefState[frame];
                        var input = level.inputHistory.FrameInputs[oneChef][frame + 1];
                        var controller = level.entityRecords.Chefs[oneChef][frame];
                        <div>@(oneChef.displayName): Pickup: @(state.highlightedForPickup?.path), Use: @(state.highlightedForUse?.path), Dash timer: @(state.dashTimer)</div>
                        <div class="chef-input-vis">
                            <div class="input-axis-vis">
                                <div class="input-axis-dot" style="left: @((input.axes.X + 1) * 20)px; top: @((input.axes.Y + 1) * 20)px"></div>
                            </div>
                            @foreach (var (title, button) in new[]{("P", input.primary), ("S", input.secondary), ("D", input.dash)}) {
                                <div class="input-button-vis @(button.isDown ? "input-button-vis-down" : "") @(button.justPressed ? "input-button-vis-just-pressed" : "") @(button.justReleased ? "input-button-vis-just-released" : "")">
                                    @(title)
                                </div>
                            }
                        </div>
                    }
                </div>
            }

            @if (ShowRecordDebug) {
                <div class="debug-panel">
                    @foreach (var record in level.entityRecords.FixedEntities)
                    {
                        <EntityRecordRenderer Record="@record" Frame="EditorState.SelectedFrame"></EntityRecordRenderer>
                    }
                </div>
            }
        </div>

        <div class="right-side-content">
            <div class="schedule-container">
                <div class="schedule-background" @ref="scheduleBackgroundRef"
                    style="min-height: @(TimelineLayout.OffsetFromFrame(level.LastEmpiricalFrame) + 100)px">
                    @foreach (var rift in TimelineLayout.Rifts) {
                        <div class="timeline-rift"
                            style="margin-top: @(rift.margin)px; height: @(rift.height)px">
                        </div>
                    }
                    @foreach (var criticalSection in TimelineLayout.CriticalSections) {
                        <div class="timeline-critical-section"
                            style="top: @(criticalSection.offset)px; height: @(criticalSection.height)px">
                        </div>
                    }
                </div>
                <div class="timeline-line-container">
                    <div class="timeline-line"
                        style="top: @(TimelineLayout.OffsetFromFrame(EditorState.SelectedFrame))px"></div>
                </div>
                <div class="schedule @(nodeSelector.IsSelecting ? "schedule-selecting" : "")">
                    @{
                        var sequences = level.sequences;
                    }
                    @for (int i = 0; i < sequences.Actions.Count; i++) {
                        var iCopy = i;
                        var actions = sequences.Actions[i];
                        bool selectedChef = EditorState.SelectedChef == sequences.Chefs[i];
                        var lastFrame = -1;
                        <div class="chef-column @(selectedChef ? "selected-chef" : "")">
                            <div class="chef-column-title">Chef @(sequences.Chefs[i])</div>
                            <div class="chef-column-contents">
                                @for (int index = 0; index < actions.Count; index++)
                                {
                                    var indexCopy = index;
                                    var node = actions[index];
                                    string stateClass;
                                    if (realGameConnector != null && realGameConnector.simulator.inProgress.Contains(node.Id)) {
                                        stateClass = "active-action";
                                    } else {
                                        stateClass = "unstarted-action";
                                    }
                                    string selectedClass;
                                    if (selectedChef && EditorState.SelectedActionIndex == index) {
                                        selectedClass = "one-action-selected";
                                    } else {
                                        selectedClass = "";
                                    }
                                    string typeClass = "one-action-type-" + node.Action.GetType().Name;
                                    <div class="one-action @(stateClass) @(selectedClass) @(typeClass)"
                                        style="margin-top: @(node.Predictions.LayoutTopMargin)px; height: @(node.Predictions.LayoutHeight)px; overflow: hidden"
                                        @onclick="async () => await HandleSelectAction(sequences.Chefs[iCopy], indexCopy, node.Predictions.StartFrame ?? 0)">
                                        <div class="one-action-text">[@(node.Id)] @(node.Action.Describe())</div>
                                        @foreach (var dep in node.Deps) {
                                            var depNode = sequences.NodeById[dep];
                                            <div class="one-action-dep one-action-dep-@(depNode.Action.Chef.className)">
                                                @(dep)
                                            </div>
                                        }
                                    </div>
                                    lastFrame = Math.Max(lastFrame, node.Predictions.EndFrame ?? -1);
                                }
                                @if (selectedChef && EditorState.SelectedActionIndex >= actions.Count) {
                                    <div class="action-insertion-prompt-selected">(Inserting here...)</div>
                                } else {
                                    <div class="action-insertion-prompt"
                                        @onclick="() => HandleSelectAction(sequences.Chefs[iCopy], actions.Count, lastFrame + 1)">Click to insert here</div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="action-editor-panel">
                @if (EditorState.SelectedChef is GameEntityRecord chef && EditorState.SelectedActionIndex < sequences.Actions[sequences.ChefIndexByChef[chef]].Count) {
                    <ActionEditor
                        Selector="nodeSelector"
                        Sequences="sequences"
                        Node="sequences.Actions[sequences.ChefIndexByChef[chef]][EditorState.SelectedActionIndex]"
                        DependenciesChanged="OnDependenciesChanged"
                        CanEdit="CanEdit" />
                    <MatIconButton Icon="delete" OnClick="HandleDeleteAction" />
                }
            </div>
        </div>
    </div>
</div>
