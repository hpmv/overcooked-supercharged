@page "/studio"
@inject IJSRuntime JSRuntime

<div class="main-container">
    <div class="left-side-content">
        <div class="entities">
            
            <EntityRecordVisualizer
            Level="level"
            EditorState="EditorState"
            OnActionAdded="SimulateInResponseToEditorChange"
            OnFrameChanged="OnFrameChanged">
            </EntityRecordVisualizer>
            
        </div>

        <div class="controls">

            <button @onclick="() => ShowRecordDebug = !ShowRecordDebug">
                @(ShowRecordDebug? "Hide " : "Show ") Record Debug</button>
            @if (ShowRecordDebug) {
                @foreach (var record in level.entityRecords.FixedEntities)
                {
                    <EntityRecordRenderer Record="@record" Frame="EditorState.SelectedFrame"></EntityRecordRenderer>
                }
            } 

            <div class="control-row">
                <button @onclick="(e) => StartRealSimulation()" disabled="@(realGameConnector != null)">Connect Game</button>
                <button @onclick="(e) => StopRealSimulation()" disabled="@(realGameConnector == null)">Disconnect Game</button>
            </div>
            <div class="control-row">
                <button @onclick="async (e) => await PauseRealSimulation()" disabled="@(!IsSimulationRunning())">Pause Real</button>
                <button @onclick="async (e) => await ResumeRealSimulation()" disabled="@(!IsSimulationPaused())">Resume Real</button>
                <span>Real Game State: @(GetRealGameState())</span>
            </div>
            
            <div class="control-row">
                <MatSelect Label="Select File to Load" @bind-Value="SelectedLevelToLoad">
                    @foreach (var file in availableSaveFiles) {
                        <MatOptionString Value="@(file)">@(file)</MatOptionString>
                    }
                </MatSelect>
                <button @onclick="LoadLevel">Load File</button>
                <button @onclick="RefreshAvailableSaveFiles">Refresh File List</button>
            </div>
            
            <div class="control-row">
                <MatInputTextComponent @bind-Value="SaveFileName" Label="Save File Name"></MatInputTextComponent>
                <button @onclick="SaveLevel">Save To File</button>
            </div>
            <div class="control-row">
                <MatSelect label="Select Level to Initialize" @bind-Value="SelectedLevelToInitialize">
                    @foreach (var (init, type) in levelInitializers) {
                        <MatOptionString Value="@(init)">@(init)</MatOptionString>
                    }
                </MatSelect>
                <button @onclick="InitializeNewLevel">Initialize New Level</button>
                <button @onclick="PatchPrefab">Patch Prefabs</button>
            </div>
            <div class="control-row">
                <button @onclick="Analyze">Analyze Gameplay</button>
            </div>

            @if (realGameConnector != null) {
                foreach (var entry in realGameConnector.simulator.Stats.messageTypeStats) {
                    <div>@(entry.Key): @(entry.Value)</div>
                }
            }
        </div>
    
    </div>

    <div class="right-side-content">
        <div class="right-top-content">
            <div class="schedule-container">
                <div class="schedule-background" @ref="scheduleBackgroundRef" style="min-height: @(TimelineLayout.OffsetFromFrame(level.LastEmpiricalFrame) + 500)px">
                    @foreach (var rift in TimelineLayout.Rifts) {
                        <div class="timeline-rift"
                            style="margin-top: @(rift.margin)px; height: @(rift.height)px">
                        </div>
                    }
                </div>
                <div class="timeline-line-container">
                    <div class="timeline-line"
                        style="top: @(TimelineLayout.OffsetFromFrame(EditorState.SelectedFrame))px"></div>
                </div>
                <div class="schedule @(nodeSelector.IsSelecting ? "schedule-selecting" : "")">
                    @{
                        var sequences = level.sequences;
                    }
                    @for (int i = 0; i < sequences.Actions.Count; i++) {
                        var iCopy = i;
                        var actions = sequences.Actions[i];
                        bool selectedChef = EditorState.SelectedChef == sequences.Chefs[i];
                        var lastFrame = -1;
                        <div class="chef-column @(selectedChef ? "selected-chef" : "")">
                            <div class="chef-column-title">Chef @(sequences.Chefs[i])</div>
                            <div class="chef-column-contents">
                                @for (int index = 0; index < actions.Count; index++)
                                {
                                    var indexCopy = index;
                                    var node = actions[index];
                                    string stateClass;
                                    if (realGameConnector != null && realGameConnector.simulator.inProgress.Contains(node.Id)) {
                                        stateClass = "active-action";
                                    } else {
                                        stateClass = "unstarted-action";
                                    }
                                    string selectedClass;
                                    if (selectedChef && EditorState.SelectedActionIndex == index) {
                                        selectedClass = "one-action-selected";
                                    } else {
                                        selectedClass = "";
                                    }
                                    <div class="one-action @(stateClass) @(selectedClass)"
                                        style="margin-top: @(node.Predictions.LayoutTopMargin)px; height: @(node.Predictions.LayoutHeight)px; overflow: hidden"
                                        @onclick="async () => await HandleSelectAction(sequences.Chefs[iCopy], indexCopy, node.Predictions.StartFrame ?? 0)">
                                        <div class="one-action-text">[@(node.Id)] @(node.Action.Describe())</div>
                                        @foreach (var dep in node.Deps) {
                                            var depNode = sequences.NodeById[dep];
                                            <div class="one-action-dep one-action-dep-@(depNode.Action.Chef.className)">
                                                @(dep)
                                            </div>
                                        }
                                    </div>
                                    lastFrame = Math.Max(lastFrame, node.Predictions.EndFrame ?? -1);
                                }
                                @if (selectedChef && EditorState.SelectedActionIndex >= actions.Count) {
                                    <div class="action-insertion-prompt-selected">(Inserting here...)</div>
                                } else {
                                    <div class="action-insertion-prompt"
                                        @onclick="() => HandleSelectAction(sequences.Chefs[iCopy], actions.Count, lastFrame + 1)">Click to insert here</div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="action-editor-panel">
                @if (EditorState.SelectedChef is GameEntityRecord chef && EditorState.SelectedActionIndex < sequences.Actions[sequences.ChefIndexByChef[chef]].Count) {
                    <ActionEditor
                    Selector="nodeSelector"
                    Sequences="sequences"
                    Node="sequences.Actions[sequences.ChefIndexByChef[chef]][EditorState.SelectedActionIndex]"
                    DependenciesChanged="OnDependenciesChanged"
                    CanEdit="CanEdit">
                    </ActionEditor>
                    <button @onclick="HandleDeleteAction">Delete Action</button>
                }
            </div>
        </div>
    </div>
</div>

@if (Analysis != null) {
    <div class="right-bottom-content">
        <AnalysisResultsViewer Analysis="Analysis"></AnalysisResultsViewer>
    </div>
}
@* 
@foreach (var entity in entities.entities) {
    <div class="entity-box">
        <div class="entity-title">@(entity.Key)
            <br/>
            @(entity.Value.spawnSourceEntityId == -1 ? "" : "^ " + entity.Value.spawnSourceEntityId)
        </div>
        <div class="entity-data-list">
            <div class="entity-data">
                <div class="entity-key">(Name & Pos)</div>
                <div class="entity-value">@(entity.Value.name) (@(entity.Value.pos.X), @(entity.Value.pos.Y), @(entity.Value.pos.Z))</div>
            </div>
            @foreach (var data in entity.Value.data) {
                if (data.Key == EntityType.WorldObject) continue;
                <div class="entity-data">
                    <div class="entity-key">@(data.Key)</div>
                    <div class="entity-value">@(toJson(data.Value))</div>
                </div>
            }
        </div>
    </div>
}
*@