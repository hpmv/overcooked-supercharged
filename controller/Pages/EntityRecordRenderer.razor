@using Google.Protobuf
@using Newtonsoft.Json

<div class="one-record">
    <div class="record-title @(Record.existed[Frame] ? "record-exists" : "record-does-not-exist")">
        <button @onclick="() => ShowDetails = !ShowDetails">@(ShowDetails ? "-":"+")</button>
        @(Record.displayName) [@(Record.path)]
        @if (Record.spawnOwner[Frame] != -1) {
            <span> (o: @(Record.spawnOwner[Frame])</span>
        }
        @{
            if (Record.progress[Frame] > 0) {
                <span> (p: @(Record.progress[Frame]))</span>
            }
        }
    </div>
    @if (ShowDetails) {
        <div class="record-details">
<pre>Position: @(Record.position[Frame])
Velocity: @(Record.velocity[Frame])
Data: @(ToJson(Record.data[Frame].ToProto()))
Progress: @(Record.progress[Frame])
@if (Record.chefState != null) {
    @("Chef: " + ToJson(Record.chefState[Frame].ToProto()))
}
Spawn Owner: @(Record.spawnOwner[Frame])
@if (Record.prefab.IsCannon && Record.data[Frame].rawGameEntityData != null) {
    @("Cannon: " + new CannonModMessage().FromBytes(Record.data[Frame].rawGameEntityData).ToJson())
}
</pre>
        </div>
    }
    <div class="record-children">
        @foreach (var spawned in Record.spawned) {
            <EntityRecordRenderer Record="@spawned" Frame="@Frame"></EntityRecordRenderer>
        }
    </div>
</div>
