@page "/carnival31-four"
@inject IJSRuntime JSRuntime

<div class="main-container">
    <div class="entities">
        @* @foreach (var record in level.entityRecords.FixedEntities)
        {
            <EntityRecordRenderer Record="@record" Frame="EditorState.SelectedFrame"></EntityRecordRenderer>
        } *@
        
        <EntityRecordVisualizer
           Level="level"
           EditorState="EditorState"
           OnActionAdded="SimulateInResponseToEditorChange">
            
        </EntityRecordVisualizer>
        <button @onclick="(e) => StartRealSimulation()">Simulate Real</button>
        <button @onclick="(e) => StopRealSimulation()">Stop Real</button>
        <button @onclick="(e) => DoOfflineSimulation()">Simulate Offline</button>
    </div>

    <div class="schedule-container">
        <div class="schedule-background" @ref="scheduleBackgroundRef" style="min-height: @(TimelineLayout.OffsetFromFrame(EditorState.LastSimulatedFrame) + 500)px">
            @foreach (var rift in TimelineLayout.Rifts) {
                <div class="timeline-rift"
                    style="margin-top: @(rift.margin)px; height: @(rift.height)px">
                </div>
            }
        </div>
        <div class="timeline-line-container">
            <div class="timeline-line"
                style="top: @(TimelineLayout.OffsetFromFrame(EditorState.SelectedFrame))px"></div>
        </div>
        <div class="schedule @(nodeSelector.IsSelecting ? "schedule-selecting" : "")">
            @{
                var sequences = level.sequences;
            }
            @for (int i = 0; i < sequences.Actions.Count; i++) {
                var iCopy = i;
                var actions = sequences.Actions[i];
                bool selectedChef = EditorState.SelectedChef == sequences.Chefs[i];
                var lastFrame = 0;
                <div class="chef-column @(selectedChef ? "selected-chef" : "")">
                    <div class="chef-column-title">Chef @(sequences.Chefs[i])</div>
                    <div class="chef-column-contents">
                        @for (int index = 0; index < actions.Count; index++)
                        {
                            var indexCopy = index;
                            var node = actions[index];
                            string stateClass;
                            if (realGameConnector != null && realGameConnector.simulator.inProgress.Any((x) => x.actionId == node.Id)) {
                                stateClass = "active-action";
                            } else {
                                stateClass = "unstarted-action";
                            }
                            string selectedClass;
                            if (selectedChef && EditorState.SelectedActionIndex == index) {
                                selectedClass = "one-action-selected";
                            } else {
                                selectedClass = "";
                            }
                            <div class="one-action @(stateClass) @(selectedClass)"
                                style="margin-top: @(node.Predictions.LayoutTopMargin)px; height: @(node.Predictions.LayoutHeight)px; overflow: hidden"
                                @onclick="() => HandleSelectAction(sequences.Chefs[iCopy], indexCopy, node.Predictions.StartFrame ?? 0)">
                                <div class="one-action-text">[@(node.Id)] @(node.Action.Describe())</div>
                                @foreach (var dep in node.Deps) {
                                    var depNode = sequences.NodeById[dep];
                                    <div class="one-action-dep one-action-dep-@(depNode.Action.Chef.className)">
                                        @(dep)
                                    </div>
                                }
                            </div>
                        }
                        @if (selectedChef && EditorState.SelectedActionIndex >= actions.Count) {
                            <div class="action-insertion-prompt-selected">(Inserting here...)</div>
                        } else {
                            <div class="action-insertion-prompt"
                                @onclick="() => HandleSelectAction(sequences.Chefs[iCopy], actions.Count, lastFrame)">Click to insert here</div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="action-editor-panel">
        @if (EditorState.SelectedChef is GameEntityRecord chef && EditorState.SelectedActionIndex < sequences.Actions[sequences.ChefIndexByChef[chef]].Count) {
            <ActionEditor Selector="nodeSelector" Sequences="sequences" Node="sequences.Actions[sequences.ChefIndexByChef[chef]][EditorState.SelectedActionIndex]">
            </ActionEditor>
            <button @onclick="HandleDeleteAction">Delete Action</button>
        }
    </div>
</div>

@* 
@foreach (var entity in entities.entities) {
    <div class="entity-box">
        <div class="entity-title">@(entity.Key)
            <br/>
            @(entity.Value.spawnSourceEntityId == -1 ? "" : "^ " + entity.Value.spawnSourceEntityId)
        </div>
        <div class="entity-data-list">
            <div class="entity-data">
                <div class="entity-key">(Name & Pos)</div>
                <div class="entity-value">@(entity.Value.name) (@(entity.Value.pos.X), @(entity.Value.pos.Y), @(entity.Value.pos.Z))</div>
            </div>
            @foreach (var data in entity.Value.data) {
                if (data.Key == EntityType.WorldObject) continue;
                <div class="entity-data">
                    <div class="entity-key">@(data.Key)</div>
                    <div class="entity-value">@(toJson(data.Value))</div>
                </div>
            }
        </div>
    </div>
}
*@