@page "/carnival31-four"
@inject IJSRuntime JSRuntime

@using Team17.Online.Multiplayer.Messaging;

@* <div class="level-visualization">
<BECanvas Width="500" Height="500" @ref="_canvasReference" ></BECanvas> *@

@* 

<div style="position: relative">
    @if (handler.CurrentState != null) {
    @foreach (var action in handler.CurrentState.States) {
        @if (action.Duration != null) {
            <div class="one-action-drawing one-action-chef-@(action.ChefId) one-action-type-@(action.Action.GetType().Name)" 
             style="top: @(TimeToPx(action.StartTime.Value))px; height: @(TimeToPx(action.Duration.Value))px">
                @(action.ActionId)</div>
        }
    }
}
</div>
 *@

<div class="main-container">
    <div class="entities">
        @* @foreach (var record in handler.simulator.Records.FixedEntities)
        {
            <EntityRecordRenderer Record="@record" Frame="handler.CurrentFrame"></EntityRecordRenderer>
        } *@
        <EntityRecordVisualizer
           Records="@(handler.simulator.Records)"
           Frame="handler.EditorState.SelectedFrame"
           Map="handler.simulator.Map"
           EditorState="handler.EditorState">
            
        </EntityRecordVisualizer>
    </div>

    <div class="schedule-container">
        <div class="schedule-background" @ref="scheduleBackgroundRef">
            @foreach (var rift in handler.TimelineLayout.Rifts) {
                <div class="timeline-rift"
                    style="margin-top: @(rift.margin)px; height: @(rift.height)px">
                </div>
            }
        </div>
        <div class="timeline-line-container">
            <div class="timeline-line"
                style="top: @(handler.TimelineLayout.OffsetFromFrame(handler.EditorState.SelectedFrame))px"></div>
        </div>
        <div class="schedule">
            @for (int i = 0; i < handler.sequences.Actions.Count; i++) {
                var iCopy = i;
                var actions = handler.sequences.Actions[i];
                bool selectedChef = handler.EditorState.SelectedChef == handler.sequences.Chefs[i];
                var lastFrame = 0;
                <div class="chef-column @(selectedChef ? "selected-chef" : "")">
                    <div class="chef-column-title">Chef @(handler.sequences.Chefs[i])</div>
                    <div class="chef-column-contents">
                        @for (int index = 0; index < actions.Count; index++)
                        {
                            var indexCopy = index;
                            var node = actions[index];
                            lastFrame = node.Predictions.EndFrame;
                            string stateClass;
                            if (handler.simulator.inProgress.Any((x) => x.actionId == node.Id)) {
                                stateClass = "active-action";
                            } else {
                                stateClass = "unstarted-action";
                            }
                            string selectedClass;
                            if (selectedChef && handler.EditorState.SelectedActionIndex == index) {
                                selectedClass = "one-action-selected";
                            } else {
                                selectedClass = "";
                            }
                            <div class="one-action @(stateClass) @(selectedClass)"
                                style="margin-top: @(node.Predictions.LayoutTopMargin)px; height: @(node.Predictions.LayoutHeight)px; overflow: hidden"
                                @onclick="() => HandleSelectAction(handler.sequences.Chefs[iCopy], indexCopy, node.Predictions.StartFrame)">
                                [@(node.Id)] @(node.Action.Describe())</div>
                        }
                        if (selectedChef && handler.EditorState.SelectedActionIndex >= actions.Count) {
                            <div class="action-insertion-prompt-selected">(Inserting here...)</div>
                        } else {
                            <div class="action-insertion-prompt"
                                @onclick="() => HandleSelectAction(handler.sequences.Chefs[iCopy], actions.Count, lastFrame)">Click to insert here</div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>
@* 
@foreach (var chef in handler.entities.chefs) {
    <div class="entity-box">
        <div class="entity-title">@(chef.Key)</div>
        <div class="entity-data-list">
            <div class="entity-data">
                <div class="entity-key">Highlighted for pickup</div>
                <div class="entity-value">@(chef.Value.highlightedForPickup)</div>
            </div>
            <div class="entity-data">
                <div class="entity-key">Highlighted for use</div>
                <div class="entity-value">@(chef.Value.highlightedForUse)</div>
            </div>
            <div class="entity-data">
                <div class="entity-key">Highlighted for placement</div>
                <div class="entity-value">@(chef.Value.highlightedForPlacement)</div>
            </div>
        </div>
    </div>
} *@
@* 
@foreach (var entity in handler.entities.entities) {
    <div class="entity-box">
        <div class="entity-title">@(entity.Key)
            <br/>
            @(entity.Value.spawnSourceEntityId == -1 ? "" : "^ " + entity.Value.spawnSourceEntityId)
        </div>
        <div class="entity-data-list">
            <div class="entity-data">
                <div class="entity-key">(Name & Pos)</div>
                <div class="entity-value">@(entity.Value.name) (@(entity.Value.pos.X), @(entity.Value.pos.Y), @(entity.Value.pos.Z))</div>
            </div>
            @foreach (var data in entity.Value.data) {
                if (data.Key == EntityType.WorldObject) continue;
                <div class="entity-data">
                    <div class="entity-key">@(data.Key)</div>
                    <div class="entity-value">@(toJson(data.Value))</div>
                </div>
            }
        </div>
    </div>
}


@foreach (var entity in handler.entities.entities) {
    <div class="entity-drawing-anchor" style="left: @(Render(entity.Value.pos).X)px; top:  @(Render(entity.Value.pos).Y)px;">
        <div class="entity-drawing-holder">
            <div class="entity-drawing-content">
                @(entity.Value.entityId)
            </div>
        </div>
    </div>
} *@