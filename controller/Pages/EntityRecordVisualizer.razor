@inject IJSRuntime JSRuntime

@{
    var frame = EditorState.SelectedFrame;
}
<div class="entity-record-renderer" @ref="canvasRef">

    <svg class="map-render" width="700" height="700">
        @foreach (var item in Level.mapByChef)
        {
            var chef = item.Key;
            var map = item.Value;
            @foreach (var polygon in map.polygons) {
                <polygon points="@PolygonString(polygon)" class="map-polygon"></polygon>
            }
        }
    </svg>

    @foreach (var record in Level.entityRecords.GenAllEntities()) {
        if (record.existed[frame] && !record.displayName.Contains("Rigidbody") && !record.displayName.Contains("Content") && !record.prefab.Ignore && record.prefab.Name != "Dirty Plate") {
            var pos = record.position[frame].XZ();
            var rendered = Render(pos);
            var forward = record.rotation[frame].ToForwardVector();
            <div class="record-vis-anchor"
                style="left: @(rendered.X)px; top: @(rendered.Y)px;">
                <div class="record-vis-holder">
                    @{
                        var tempPrefab = record.prefab;
                        string ingredientClass = "";
                        while (tempPrefab.Spawns.Count > 0) {
                            tempPrefab = tempPrefab.Spawns[0];
                        }
                        if (tempPrefab.IsIngredient) {
                            ingredientClass = "record-vis-ingredient-" + tempPrefab.IngredientId;
                        }
                        var recordClass = "";
                        if (record.prefab.IsCrate) {
                            recordClass = "record-vis-type-crate";
                        } else if (record.prefab.IsIngredient) {
                            recordClass = "record-vis-type-ingredient";
                        } else if (record.prefab.IsChoppable) {
                            recordClass = "record-vis-type-unchopped-ingredient";
                        } else {
                            recordClass = "record-vis-type-" + record.className;
                        }
                    }
                    <div class="record-vis @(recordClass) @(ingredientClass)"
                        data-entity-path="@(record.path)"
                        style="@($"transform: rotate({(-Math.Atan2(forward.Y, forward.X) + Math.PI / 2)}rad)")">
                        @if (record.prefab.Name == "Dirty Plate Stack") {
                            @(record.spawned.Count(s => s.existed[frame]))
                        } else if (record.prefab.Name == "Sink") {
                            @(record.data[frame].numPlates)
                        } else {
                            @(record.displayName)
                        }
                    </div>
                    @if (record.progress[frame] != 0) {
                        <div class="record-vis-progress">
                            <MatProgressBar Progress="@(record.progress[frame] / Math.Max(record.prefab.MaxProgress, 0.001))"></MatProgressBar>
                        </div>
                    }
                    @{
                        var interacters = record.data[frame].chopInteracters;
                        if (interacters != null) {
                            <div class="record-vis-interacters">
                                @foreach (var (chef, time) in interacters) {
                                    <div class="record-vis-interacter record-vis-interacter-@(chef.prefab.ClassName)">
                                    </div>
                                }
                            </div>
                        }
                    }
                    @if (record.data[frame].isFlying) {
                        <div class="record-vis-flying">▲</div>
                    }
                    @if (record.prefab.CanContainIngredients && record.data[frame].contents is List<int> contents) {
                        <div class="record-vis-ingredient-container">
                            @foreach (var ingredient in contents) {
                                <div class="record-vis-ingredient record-vis-ingredient-@(ingredient)">
                                    @(ingredient)
                                </div>
                            }
                        </div>
                    }
                    @if (record.data[frame].plateRespawnTimers is List<TimeSpan> timers) {
                        <div class="record-vis-plate-respawn-timers">
                            @foreach (var timer in timers) {
                                <div class="record-vis-plate-respawn-timer">
                                    @(Math.Ceiling(timer.TotalSeconds))
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    }
    <div @ref="EntityMenuAnchor" style="position: absolute; left: @(EntityMenuX)px; top: @(EntityMenuY)px;"></div>
</div>


<MatMenu @ref="Menu">
    @if (EntityMenuOpen) {
        @foreach (var entity in EntitiesForMenu) {
            var actionTemplates = EditorState.GetActionTemplatesForEntity(entity);
            <MatListGroup>
                <MatListGroupSubHeader>@(entity.displayName) [@(entity.path)]</MatListGroupSubHeader>
                <MatList>
                    @foreach (var template in actionTemplates) {
                        <MatListItem OnClick="() => HandleTemplateClick(template)">
                            <div style="margin-left: 20px">@(template.Describe())</div>
                        </MatListItem>
                    }
                </MatList>
            </MatListGroup>
        }
        if (Level != null) {
            var pos = InverseRender(new System.Numerics.Vector2((float)EntityMenuX, (float)EntityMenuY));
            var actionTemplates = EditorState.GetActionTemplatesForPosition(pos);
            
            <MatListGroup>
                <MatListGroupSubHeader>Position @(pos)</MatListGroupSubHeader>
                <MatList>
                    @foreach (var template in actionTemplates) {
                        <MatListItem OnClick="() => HandleTemplateClick(template)">
                            <div style="margin-left: 20px">@(template.Describe())</div>
                        </MatListItem>
                    }
                </MatList>
            </MatListGroup>
        }
    }
</MatMenu>

<span>Frame: @(frame), Time: @(TimeSpan.FromMinutes(4.5) - TimeSpan.FromSeconds(1)/Config.FRAMERATE * frame)</span>
<button @onclick="GotoPrevFrame">&lt;&lt;</button>
<button @onclick="GotoNextFrame">&gt;&gt;</button>
@if (!IsAutoplaying) {
    <button @onclick="StartAutoplay">▶</button>
} else {
    <button @onclick="(e) => IsAutoplaying = false">⏸</button>
}

<button @onclick="() => ShowControls = !ShowControls">@(ShowControls ? "Hide Inputs" : "Show Inputs")</button>
@if (ShowControls) {
    @foreach (var (chef, _) in Level.entityRecords.Chefs) {
        var state = chef.chefState[frame];
        var input = Level.inputHistory.FrameInputs[chef][frame + 1];
        var controller = Level.entityRecords.Chefs[chef][frame];
        <div>@(chef.displayName): Pickup: @(state.highlightedForPickup?.path), Use: @(state.highlightedForUse?.path), Dash timer: @(state.dashTimer)</div>
        <div class="chef-input-vis">
            <div class="input-axis-vis">
                <div class="input-axis-dot" style="left: @((input.axes.X + 1) * 20)px; top: @((input.axes.Y + 1) * 20)px"></div>
            </div>
            @foreach (var (title, button) in new[]{("P", input.primary), ("S", input.secondary), ("D", input.dash)}) {
                <div class="input-button-vis @(button.isDown ? "input-button-vis-down" : "") @(button.justPressed ? "input-button-vis-just-pressed" : "") @(button.justReleased ? "input-button-vis-just-released" : "")">
                    @(title)
                </div>
            }
        </div>
        @* <div>
            Vel: @(controller.axesVelocity) Accel: @(controller.axesAcceleration) Down: @(controller.axesDown) Cooldown: @(controller.axesCooldown)
        </div> *@
    }
}
