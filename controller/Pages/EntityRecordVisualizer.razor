@inject IJSRuntime JSRuntime

@{
    var frame = EditorState.SelectedFrame;
}
<div class="entity-record-renderer" @ref="canvasRef">
    @foreach (var record in Level.entityRecords.GenAllEntities()) {
        if (record.existed[frame] && !record.displayName.Contains("Rigidbody") && !record.displayName.Contains("Content") && !record.prefab.Ignore) {
            var pos = record.position[frame].XZ();
            var rendered = Render(pos);
            <div class="record-vis-anchor"
                style="left: @(rendered.X)px; top: @(rendered.Y)px;">
                <div class="record-vis-holder">
                    <div class="record-vis record-vis-type-@(record.className)"
                        data-entity-path="@(record.path)"
                        style="@(record.chefState != null ? "transform: rotate(" + (-Math.Atan2(record.chefState[frame].forward.Y, record.chefState[frame].forward.X) + Math.PI / 2) + "rad)" : "")">
                        @(record.displayName)
                    </div>
                    @if (record.progress[frame] != 0) {
                        <div class="record-vis-progress">
                            <MatProgressBar Progress="@(record.progress[frame] / record.prefab.MaxProgress)"></MatProgressBar>
                        </div>
                    }
                    @{
                        var interacters = record.data[frame].chopInteracters;
                        if (interacters != null) {
                            <div class="record-vis-interacters">
                                @foreach (var (chef, time) in interacters) {
                                    <div class="record-vis-interacter record-vis-interacter-@(chef.prefab.ClassName)">
                                    </div>
                                }
                            </div>
                        }
                    }
                    @if (record.prefab.CanContainIngredients && record.data[frame].contents is List<int> contents) {
                        <div class="record-vis-ingredient-container">
                            @foreach (var ingredient in contents) {
                                <div class="record-vis-ingredient record-vis-ingredient-@(ingredient)">
                                    @(ingredient)
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    }
    <div @ref="EntityMenuAnchor" style="position: absolute; left: @(EntityMenuX)px; top: @(EntityMenuY)px;"></div>
</div>

<MatMenu @ref="Menu">
    @foreach (var entity in EntitiesForMenu) {
        var actionTemplates = EditorState.GetActionTemplatesForEntity(entity);
        <MatListGroup>
            <MatListGroupSubHeader>@(entity.displayName) [@(entity.path)]</MatListGroupSubHeader>
            <MatList>
                @foreach (var template in actionTemplates) {
                    <MatListItem OnClick="() => HandleTemplateClick(template)">
                        <div style="margin-left: 20px">@(template.Describe())</div>
                    </MatListItem>
                }
            </MatList>
        </MatListGroup>
    }
</MatMenu>

<span>Frame: @(frame), Time: @(TimeSpan.FromMinutes(4.5) - TimeSpan.FromSeconds(1)/60 * frame)</span>
<button @onclick="(e) => EditorState.SelectedFrame--">&lt;&lt;</button>
<button @onclick="(e) => EditorState.SelectedFrame++">&gt;&gt;</button>
@foreach (var (chef, _) in Level.entityRecords.Chefs) {
    var state = chef.chefState[frame];
    <div>@(chef.displayName): Pickup: @(state.highlightedForPickup?.path), Use: @(state.highlightedForUse?.path), Dash timer: @(state.dashTimer)</div>
    var input = Level.inputHistory.FrameInputs[chef][frame];
    <div class="chef-input-vis">
        <div class="input-axis-vis">
            <div class="input-axis-dot" style="left: @((input.axes.X + 1) * 20)px; top: @((input.axes.Y + 1) * 20)px"></div>
        </div>
        @foreach (var (title, button) in new[]{("P", input.primary), ("S", input.secondary), ("D", input.dash)}) {
            <div class="input-button-vis @(button.isDown ? "input-button-vis-down" : "") @(button.justPressed ? "input-button-vis-just-pressed" : "") @(button.justReleased ? "input-button-vis-just-released" : "")">
                @(title)
            </div>
        }
    </div>
}