@inject IJSRuntime JSRuntime

@{
    var frame = EditorState.SelectedFrame;
}
<div class="entity-record-renderer-container" @ref="canvasRef">
<div class="entity-record-renderer" style="transform: scale(@(RenderScale)); height:@(RenderScale*SvgHeight)px">

    <svg class="map-render" width="@(SvgWidth)" height="@(SvgHeight)">
        @foreach (var item in Level.mapByChef)
        {
            var chef = item.Key;
            var map = item.Value;
            <path d="@PolygonString(map.polygons)" class="map-polygon"></path>
            @if (Level.pathDebug.ContainsKey(chef)) {
                var path = Level.pathDebug[chef];
                <path d="@PathString(path)" class="map-path"></path>
            }
        }
    </svg>

    @{
        var stationToRespawnTimers = new Dictionary<GameEntityRecord, List<TimeSpan>>();
        foreach (var record in Level.entityRecords.FixedEntities) {
            if (record.prefab.IsKitchenFlowController) {
                var respawns = record.data[frame].plateRespawns;
                if (respawns != null) {
                    foreach (var (station, timer) in respawns) {
                        if (!stationToRespawnTimers.ContainsKey(station)) {
                            stationToRespawnTimers[station] = new List<TimeSpan>();
                        }
                        stationToRespawnTimers[station].Add(timer);
                    }
                }
            }
        }
    }

    @foreach (var record in Level.entityRecords.GenAllEntities()) {
        if (record.existed[frame] && !record.displayName.Contains("Rigidbody") && !record.displayName.Contains("Content") && !record.prefab.Ignore && record.prefab.Name != "Dirty Plate") {
            var pos = record.position[frame].XZ();
            var rendered = Render(pos);
            var forward = record.rotation[frame].ToForwardVector();
            <div class="record-vis-anchor"
                style="left: @(rendered.X)px; top: @(rendered.Y)px;">
                <div class="record-vis-holder">
                    @{
                        var tempPrefab = record.prefab;
                        string ingredientClass = "";
                        while (tempPrefab.Spawns.Count > 0) {
                            if (tempPrefab.IsPickupItemSwitcher) {
                                var index = record.data[frame].switchingIndex;
                                if (index < tempPrefab.Spawns.Count) {
                                    tempPrefab = tempPrefab.Spawns[index];
                                } else {
                                    tempPrefab = tempPrefab.Spawns[0];
                                }
                            } else {
                                tempPrefab = tempPrefab.Spawns[0];
                            }
                        }
                        if (tempPrefab.IsIngredient) {
                            ingredientClass = "record-vis-ingredient-" + tempPrefab.IngredientId;
                        }
                        var recordClass = "";
                        if (record.prefab.IsCrate) {
                            recordClass = "record-vis-type-crate";
                        } else if (record.prefab.IsIngredient) {
                            recordClass = "record-vis-type-ingredient";
                        } else if (record.prefab.IsChoppable) {
                            recordClass = "record-vis-type-unchopped-ingredient";
                        } else {
                            recordClass = "record-vis-type-" + record.className;
                        }
                    }
                    <div class="record-vis @(recordClass) @(ingredientClass)"
                        data-entity-path="@(record.path)"
                        style="@($"transform: rotate({(-Math.Atan2(forward.Y, forward.X) + Math.PI / 2)}rad)")">
                        @if (record.prefab.Name == "Dirty Plate Stack") {
                            @(record.spawned.Count(s => s.existed[frame]))
                        } else if (record.prefab.Name == "Sink") {
                            @(record.data[frame].numPlates)
                        } else {
                            @(record.displayName)
                        }
                    </div>
                    @if (record.washingProgress[frame] != 0) {
                        <div class="record-vis-progress">
                            <MatProgressBar Progress="@(record.washingProgress[frame] / Math.Max(record.prefab.MaxProgress, 0.001))"></MatProgressBar>
                        </div>
                    }
                    @if (record.choppingProgress[frame] != 0) {
                        <div class="record-vis-progress">
                            <MatProgressBar Progress="@(record.choppingProgress[frame] / Math.Max(record.prefab.MaxProgress, 0.001))"></MatProgressBar>
                        </div>
                    }
                    @if (record.cookingProgress[frame] != 0) {
                        <div class="record-vis-progress">
                            <MatProgressBar Progress="@(record.cookingProgress[frame] / Math.Max(record.prefab.MaxProgress, 0.001))"></MatProgressBar>
                        </div>
                    }
                    @if (record.mixingProgress[frame] != 0) {
                        <div class="record-vis-progress">
                            <MatProgressBar Progress="@(record.mixingProgress[frame] / Math.Max(record.prefab.MaxProgress, 0.001))"></MatProgressBar>
                        </div>
                    }
                    
                    @{
                        var data = record.data[frame];
                        var interacters = data.chopInteracters;
                        if (interacters != null) {
                            <div class="record-vis-interacters">
                                @foreach (var (chef, time) in interacters) {
                                    <div class="record-vis-interacter record-vis-interacter-@(chef.prefab.ClassName)">
                                    </div>
                                }
                            </div>
                        }
                        var interacter = data.sessionInteracter;
                        if (interacter != null) {
                            <div class="record-vis-interacters">
                                <div class="record-vis-interacter record-vis-interacter-@(interacter.prefab.ClassName)">
                                </div>
                            </div>
                        }
                    }
                    @if (data.throwableItem.IsFlying) {
                        <div class="record-vis-flying">â–²</div>
                    }
                    @if (record.prefab.CanContainIngredients && data.contents is List<int> contents) {
                        <div class="record-vis-ingredient-container">
                            @foreach (var ingredient in contents) {
                                <div class="record-vis-ingredient record-vis-ingredient-@(ingredient)">
                                    @(ingredient)
                                </div>
                            }
                        </div>
                    }
                    @if (stationToRespawnTimers.ContainsKey(record)) {
                        <div class="record-vis-plate-respawn-timers">
                            @foreach (var timer in stationToRespawnTimers[record]) {
                                <div class="record-vis-plate-respawn-timer">
                                    @(Math.Ceiling(timer.TotalSeconds))
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    }
    <div @ref="EntityMenuAnchor" style="position: absolute; left: @(EntityMenuX)px; top: @(EntityMenuY)px;"></div>
</div>
</div>
<MatMenu @ref="Menu">
    @foreach (var entity in EntitiesForMenu) {
        var actionTemplates = EditorState.GetActionTemplatesForEntity(entity);
        <MatListGroup>
            <MatListGroupSubHeader>@(entity.displayName) [@(entity.path)]</MatListGroupSubHeader>
            <MatList>
                @foreach (var template in actionTemplates) {
                    <MatListItem OnClick="() => HandleTemplateClick(template)">
                        <div style="margin-left: 20px">@(template.Describe())</div>
                    </MatListItem>
                }
            </MatList>
        </MatListGroup>
    }
    @if (Level?.geometry != null) {
        var pos = InverseRender(new System.Numerics.Vector2((float)EntityMenuX, (float)EntityMenuY));
        var actionTemplates = EditorState.GetActionTemplatesForPosition(pos);
        
        <MatListGroup>
            <MatListGroupSubHeader>Position @(pos)</MatListGroupSubHeader>
            <MatList>
                @foreach (var template in actionTemplates) {
                    <MatListItem OnClick="() => HandleTemplateClick(template)">
                        <div style="margin-left: 20px">@(template.Describe())</div>
                    </MatListItem>
                }
            </MatList>
        </MatListGroup>
    }
</MatMenu>
